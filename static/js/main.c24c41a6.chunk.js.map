{"version":3,"sources":["components/Header.jsx","components/Loading.jsx","components/ListItem.jsx","components/List.jsx","components/UserProfile.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","currentState","onClick","e","handleClick","user","firstName","Loading","ListItem","id","src","profileImage","alt","lastName","List","users","map","index","key","UserProfile","email","phone","address","city","state","country","App","backToList","setState","isShowingList","selectContact","activeIndex","isLoaded","fetch","then","res","json","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+TA2BeA,MAzBf,SAAgBC,GACd,OACE,yBACEC,UACED,EAAME,aACF,yBACA,6BAGN,4BACED,UACED,EAAME,aAAe,oBAAsB,uBAE7CC,QAAS,SAAAC,GAAC,OAAIJ,EAAMK,YAAYD,KAEhC,0BAAMH,UAAU,cAAhB,WAEF,wBAAIA,UAAU,WACXD,EAAME,aAAe,gBAAkBF,EAAMM,KAAKC,WAhBvD,MCEWC,MAJf,WACE,OAAO,4CCaMC,MAdf,SAAkBT,GAAQ,IAChBM,EAASN,EAATM,KACR,OACE,wBAAIL,UAAU,YAAYE,QAAS,SAAAC,GAAC,OAAIJ,EAAMK,YAAYD,EAAGE,EAAKI,GAAK,KACrE,yBACET,UAAU,wBACVU,IAAKL,EAAKM,aACVC,IAAK,oBAAsBP,EAAKC,YAEjCD,EAAKC,UANR,IAMoBD,EAAKQ,WCGdC,MAXf,SAAcf,GAAQ,IACdgB,EAAUhB,EAAVgB,MACN,OACE,4BACGA,EAAMC,KAAI,SAACX,EAAMY,GAAP,OACT,kBAAC,EAAD,CAAUC,IAAKD,EAAOZ,KAAMA,EAAMD,YAAaL,EAAMK,mBCuB9Ce,MA7Bf,SAAqBpB,GAAQ,IACnBM,EAASN,EAATM,KACR,OACE,yBAAKL,UAAU,gBACb,yBAAKA,UAAU,uBACb,yBACEU,IAAKL,EAAKM,aACVC,IAAK,oBAAsBP,EAAKC,UAChCN,UAAU,yBAGd,yBAAKA,UAAU,4BACb,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,wBACZK,EAAKC,UADR,IACoBD,EAAKQ,UAEzB,yBAAKb,UAAU,yBAAyBK,EAAKe,OAC7C,yBAAKpB,UAAU,yBAAyBK,EAAKgB,QAE/C,yBAAKrB,UAAU,2BACb,0BAAMA,UAAU,wBAAwBK,EAAKiB,QAAQC,MADvD,IAEE,0BAAMvB,UAAU,yBAAhB,IAA0CK,EAAKiB,QAAQE,OACvD,yBAAKxB,UAAU,2BAA2BK,EAAKiB,QAAQG,aCuClDC,G,kBArDb,aAAe,IAAD,8BACZ,+CAmBFC,WAAa,WACX,EAAKC,SAAS,CACZC,eAAe,KAtBL,EA0BdC,cAAgB,SAAC3B,EAAGc,GAClB,EAAKW,SAAS,CACZC,eAAe,EACfE,YAAad,KA3Bf,EAAKO,MAAQ,CACXT,MAAO,GACPgB,YAAa,EACbC,UAAU,EACVH,eAAe,GANL,E,kFASQ,IAAD,OACnBI,MAAM,uCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OACP,EAAKP,SAAS,CACZb,MAAOoB,EACPH,UAAU,S,+BAmBhB,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,CACEI,YAAaiC,KAAKV,WAClB1B,aAAcoC,KAAKb,MAAMK,cACzBxB,KAAMgC,KAAKb,MAAMT,MAAMsB,KAAKb,MAAMO,eAElCM,KAAKb,MAAMQ,SAETK,KAAKb,MAAMK,cACb,kBAAC,EAAD,CAAMd,MAAOsB,KAAKb,MAAMT,MAAOX,YAAaiC,KAAKP,gBAEjD,kBAAC,EAAD,CAAazB,KAAMgC,KAAKb,MAAMT,MAAMsB,KAAKb,MAAMO,eAJ/C,kBAAC,EAAD,W,GA3CQO,IAAMC,YCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,kB","file":"static/js/main.c24c41a6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <div\r\n      className={\r\n        props.currentState\r\n          ? \"heading-container list\"\r\n          : \"heading-container profile\"\r\n      }\r\n    >\r\n      <button\r\n        className={\r\n          props.currentState ? \"btn btn-back list\" : \"btn btn-back profile\"\r\n        }\r\n        onClick={e => props.handleClick(e)}\r\n      >\r\n        <span className=\"back-arrow\">&#8592;</span>\r\n      </button>\r\n      <h1 className=\"heading\">\r\n        {props.currentState ? \"Employee List\" : props.user.firstName}\r\n      </h1>\r\n      ;\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction Loading() {\r\n  return <div>loading...</div>;\r\n}\r\n\r\nexport default Loading;\r\n","import React from \"react\";\r\n\r\nfunction ListItem(props) {\r\n  const { user } = props;\r\n  return (\r\n    <li className=\"list-item\" onClick={e => props.handleClick(e, user.id - 1)}>\r\n      <img\r\n        className=\"list-item profile-pic\"\r\n        src={user.profileImage}\r\n        alt={\"profile image of \" + user.firstName}\r\n      />\r\n      {user.firstName} {user.lastName}\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ListItem;\r\n","import React from \"react\";\r\nimport ListItem from \"./ListItem\";\r\n\r\nfunction List(props) {\r\n  let { users } = props;\r\n  return (\r\n    <ul>\r\n      {users.map((user, index) => (\r\n        <ListItem key={index} user={user} handleClick={props.handleClick} />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default List;\r\n","import React from \"react\";\r\n\r\nfunction UserProfile(props) {\r\n  const { user } = props;\r\n  return (\r\n    <div className=\"user-profile\">\r\n      <div className=\"profile profile-top\">\r\n        <img\r\n          src={user.profileImage}\r\n          alt={\"profile image of \" + user.firstName}\r\n          className=\"profile profile-pic\"\r\n        />\r\n      </div>\r\n      <div className=\"profile profile-contents\">\r\n        <div className=\"profile profile-basic-info\">\r\n          <div className=\"profile profile-name\">\r\n            {user.firstName} {user.lastName}\r\n          </div>\r\n          <div className=\"profile profile-email\">{user.email}</div>\r\n          <div className=\"profile profile-phone\">{user.phone}</div>\r\n        </div>\r\n        <div className=\"profile profile-address\">\r\n          <span className=\"profile profile-city\">{user.address.city}</span>,\r\n          <span className=\"profile profile-state\"> {user.address.state}</span>\r\n          <div className=\"profile profile-country\">{user.address.country}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserProfile;\r\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport Loading from \"./components/Loading\";\nimport List from \"./components/List\";\nimport UserProfile from \"./components/UserProfile\";\n// import withBackButton from \"./components/HOC\";\nimport \"./App.css\";\n\n// const EnhancedHeader = withBackButton(Header);\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      users: [],\n      activeIndex: 0,\n      isLoaded: false,\n      isShowingList: true\n    };\n  }\n  componentWillMount() {\n    fetch(\"https://mock-io.herokuapp.com/users\")\n      .then(res => res.json())\n      .then(res =>\n        this.setState({\n          users: res,\n          isLoaded: true\n        })\n      );\n  }\n\n  backToList = () => {\n    this.setState({\n      isShowingList: true\n    });\n  };\n\n  selectContact = (e, index) => {\n    this.setState({\n      isShowingList: false,\n      activeIndex: index\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n          handleClick={this.backToList}\n          currentState={this.state.isShowingList}\n          user={this.state.users[this.state.activeIndex]}\n        />\n        {!this.state.isLoaded ? (\n          <Loading />\n        ) : this.state.isShowingList ? (\n          <List users={this.state.users} handleClick={this.selectContact} />\n        ) : (\n          <UserProfile user={this.state.users[this.state.activeIndex]} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './styles/reset.css';\nimport './styles/style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}